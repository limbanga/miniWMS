import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, useWatch } from "react-hook-form";
import { z } from "zod";
import { PlusCircle } from "lucide-react";
import { useState } from "react";

const MAX_TOTAL_CAPACITY = 1000;

const shelfSchema = z.object({
  levels: z.coerce.number().int().min(1, "Phải có ít nhất 1 tầng"),
  capacityPerLevel: z.coerce.number().min(1, "Sức chứa mỗi tầng phải lớn hơn 0"),
});

type ShelfFormValues = z.infer<typeof shelfSchema>;

interface Props {
  onAddShelf: (data: ShelfFormValues & { name: string }) => void;
  nextShelfIndex?: number; // Để tự sinh tên kệ: Kệ A1, A2,...
}

export default function AddShelfDialog({ onAddShelf, nextShelfIndex = 1 }: Props) {
    // TODO: Sửa lại cho phù hợp với dữ liệu thực tế
  const [open, setOpen] = useState(false);

  const form = useForm<ShelfFormValues>({
    resolver: zodResolver(shelfSchema),
    defaultValues: {
      levels: 1,
      capacityPerLevel: 100,
    },
  });

  const levels = useWatch({ control: form.control, name: "levels" });
  const capacityPerLevel = useWatch({ control: form.control, name: "capacityPerLevel" });
  const totalCapacity = levels * capacityPerLevel;
  const remainingCapacity = MAX_TOTAL_CAPACITY - totalCapacity;

  const autoGeneratedName = `Kệ A${nextShelfIndex}`;

  const onSubmit = (data: ShelfFormValues) => {
    if (totalCapacity > MAX_TOTAL_CAPACITY) return;
    onAddShelf({ ...data, name: autoGeneratedName });
    setOpen(false);
    form.reset();
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm">
          <PlusCircle className="w-4 h-4 mr-2" />
          Thêm kệ mới
        </Button>
      </DialogTrigger>

      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Thêm kệ mới</DialogTitle>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-5">
            <div>
              <FormLabel>Tên kệ</FormLabel>
              <p className="font-medium">{autoGeneratedName}</p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="levels"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Số tầng</FormLabel>
                    <FormControl>
                      <Input type="number" min={1} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="capacityPerLevel"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Sức chứa mỗi tầng</FormLabel>
                    <FormControl>
                      <Slider
                        min={10}
                        max={500}
                        step={10}
                        value={[field.value]}
                        onValueChange={(val) => field.onChange(val[0])}
                      />
                    </FormControl>
                    <div className="text-sm mt-1 text-muted-foreground">
                      {field.value} đơn vị
                    </div>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="text-sm text-muted-foreground border rounded-md p-3 space-y-1 bg-muted/50">
              <p><strong>Tổng sức chứa:</strong> {totalCapacity} đơn vị</p>
              <p>
                <strong>Còn lại:</strong>{" "}
                {remainingCapacity >= 0 ? `${remainingCapacity} đơn vị` : (
                  <span className="text-red-500">Vượt quá {Math.abs(remainingCapacity)} đơn vị</span>
                )}
              </p>
            </div>

            <DialogFooter className="gap-2 sm:justify-end">
              <DialogClose asChild>
                <Button type="button" variant="ghost">
                  Hủy
                </Button>
              </DialogClose>
              <Button type="submit" disabled={totalCapacity > MAX_TOTAL_CAPACITY}>
                Lưu
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
